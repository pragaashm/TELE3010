
make_avr_ex_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000218  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void) 
{
	LED_PORT &= ~(0b00001111);
  80:	85 b1       	in	r24, 0x05	; 5
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	85 b9       	out	0x05, r24	; 5
	// -------- Inits --------- //
	uint8_t buttonWasPressed; /* state */
	BUTTON_PORT |= (1 << BUTTON); /* enable the pullup on the button */
  86:	2c 9a       	sbi	0x05, 4	; 5
	LED_DDR = (1 << LED0); /* set up LED for output */
  88:	80 e2       	ldi	r24, 0x20	; 32
  8a:	84 b9       	out	0x04, r24	; 4

#include <avr/io.h>


int main(void) 
{
  8c:	31 e0       	ldi	r19, 0x01	; 1
			if (buttonWasPressed == 0) { /* but wasn't last time through */
				LED_PORT ^= (1 << LED0); /* do whatever */
				buttonWasPressed = 1; /* update the state */
			} 
		} else { /* button is not pressed now */
			buttonWasPressed = 0; /* update the state */
  8e:	90 e0       	ldi	r25, 0x00	; 0
	LED_DDR = (1 << LED0); /* set up LED for output */
	// ------ Event loop ------ //
	while (1) {
		if (bit_is_clear(BUTTON_PIN, BUTTON)) { /* button is pressed now */
			if (buttonWasPressed == 0) { /* but wasn't last time through */
				LED_PORT ^= (1 << LED0); /* do whatever */
  90:	20 e2       	ldi	r18, 0x20	; 32

#include <avr/io.h>


int main(void) 
{
  92:	83 2f       	mov	r24, r19
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x18>
			if (buttonWasPressed == 0) { /* but wasn't last time through */
				LED_PORT ^= (1 << LED0); /* do whatever */
				buttonWasPressed = 1; /* update the state */
			} 
		} else { /* button is not pressed now */
			buttonWasPressed = 0; /* update the state */
  96:	89 2f       	mov	r24, r25
	uint8_t buttonWasPressed; /* state */
	BUTTON_PORT |= (1 << BUTTON); /* enable the pullup on the button */
	LED_DDR = (1 << LED0); /* set up LED for output */
	// ------ Event loop ------ //
	while (1) {
		if (bit_is_clear(BUTTON_PIN, BUTTON)) { /* button is pressed now */
  98:	1c 99       	sbic	0x03, 4	; 3
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x16>
			if (buttonWasPressed == 0) { /* but wasn't last time through */
  9c:	81 11       	cpse	r24, r1
  9e:	fc cf       	rjmp	.-8      	; 0x98 <main+0x18>
				LED_PORT ^= (1 << LED0); /* do whatever */
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	82 27       	eor	r24, r18
  a4:	85 b9       	out	0x05, r24	; 5
  a6:	f5 cf       	rjmp	.-22     	; 0x92 <main+0x12>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
