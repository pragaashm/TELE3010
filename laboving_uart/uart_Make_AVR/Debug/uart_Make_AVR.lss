
uart_Make_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b21  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079a  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004de  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056c  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000256e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int main(void) {
	char serialCharacter;
	// -------- Inits --------- //
	/* set up LEDs for output */  
	DDRD = 0xfC;
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<DDB1)|(1<<DDB0);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	84 b9       	out	0x04, r24	; 4

	initUSART();
  9e:	0e 94 64 00 	call	0xc8	; 0xc8 <initUSART>
	printString("Hello World!\r\n");                          /* to test */
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	0e 94 86 00 	call	0x10c	; 0x10c <printString>

	// ------ Event loop ------ //
	while (1) {
		serialCharacter = receiveByte();
  aa:	0e 94 7e 00 	call	0xfc	; 0xfc <receiveByte>
  ae:	c8 2f       	mov	r28, r24
		transmitByte(serialCharacter);
  b0:	0e 94 76 00 	call	0xec	; 0xec <transmitByte>
		PORTB = serialCharacter >> 6;	   // 0bABCDEFGH >> 6 = 0b000000AB
  b4:	8c 2f       	mov	r24, r28
  b6:	82 95       	swap	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	83 70       	andi	r24, 0x03	; 3
  be:	85 b9       	out	0x05, r24	; 5
		PORTD = serialCharacter << 2;      // 0bABCDEFGH << 2 = 0bCDEFGH00
  c0:	cc 0f       	add	r28, r28
  c2:	cc 0f       	add	r28, r28
  c4:	cb b9       	out	0x0b, r28	; 11
  c6:	f1 cf       	rjmp	.-30     	; 0xaa <main+0x14>

000000c8 <initUSART>:
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
//   UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
//   UBRR0L = UBRRL_VALUE;
	UBRR0 = UBRR_VALUE;                        /* defined in setbaud.h */
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ea:	08 95       	ret

000000ec <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	95 ff       	sbrs	r25, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  fa:	08 95       	ret

000000fc <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  fc:	e0 ec       	ldi	r30, 0xC0	; 192
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <receiveByte+0x4>
  return UDR0;                                /* return register value */
 106:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 10a:	08 95       	ret

0000010c <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	59 f0       	breq	.+22     	; 0x130 <printString+0x24>
 11a:	8f 01       	movw	r16, r30
 11c:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 11e:	0e 94 76 00 	call	0xec	; 0xec <transmitByte>
    i++;
 122:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 124:	f8 01       	movw	r30, r16
 126:	ec 0f       	add	r30, r28
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	f7 cf       	rjmp	.-18     	; 0x11e <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
