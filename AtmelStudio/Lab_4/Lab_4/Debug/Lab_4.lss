
Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000694  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000071  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <debounce>:

#include <util/delay.h>
#define DEBOUNCE_TIME  1000                            /* microseconds */

uint8_t debounce(void) {
	if (bit_is_clear(BUTTON_PIN, BUTTON)) {      /* button is pressed now */
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	0d c0       	rjmp	.+26     	; 0x9e <debounce+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	89 ef       	ldi	r24, 0xF9	; 249
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <debounce+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <debounce+0xe>
  8e:	00 00       	nop
		_delay_us(DEBOUNCE_TIME);
		if (bit_is_clear(BUTTON_PIN, BUTTON)) {            /* still pressed */
  90:	89 b1       	in	r24, 0x09	; 9
			return (1);
  92:	82 fb       	bst	r24, 2
  94:	99 27       	eor	r25, r25
  96:	90 f9       	bld	r25, 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 27       	eor	r24, r25
  9c:	08 95       	ret
		}
	}
	return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
}
  a0:	08 95       	ret

000000a2 <main>:

int main(void) {
	// -------- Inits --------- //
	uint8_t buttonWasPressed=0;                                 /* state */
	BUTTON_PORT |= (1 << BUTTON);     /* enable the pullup on the button */
  a2:	5a 9a       	sbi	0x0b, 2	; 11
	LED_DDR = (1 << LED0);                      /* set up LED for output */
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	84 b9       	out	0x04, r24	; 4
	return 0;
}

int main(void) {
	// -------- Inits --------- //
	uint8_t buttonWasPressed=0;                                 /* state */
  a8:	c0 e0       	ldi	r28, 0x00	; 0

	// ------ Event loop ------ //
	while (1) {
		if (debounce()) {                        /* debounced button press */
			if (buttonWasPressed == 0) {     /* but wasn't last time through */
				LED_PORT ^= (1 << LED0);                        /* do whatever */
  aa:	11 e0       	ldi	r17, 0x01	; 1
				buttonWasPressed = 1;                      /* update the state */
			}
		}
		else {                                /* button is not pressed now */
			buttonWasPressed = 0;                        /* update the state */
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x10>
  b0:	cd 2f       	mov	r28, r29
	BUTTON_PORT |= (1 << BUTTON);     /* enable the pullup on the button */
	LED_DDR = (1 << LED0);                      /* set up LED for output */

	// ------ Event loop ------ //
	while (1) {
		if (debounce()) {                        /* debounced button press */
  b2:	0e 94 40 00 	call	0x80	; 0x80 <debounce>
  b6:	88 23       	and	r24, r24
  b8:	d9 f3       	breq	.-10     	; 0xb0 <main+0xe>
			if (buttonWasPressed == 0) {     /* but wasn't last time through */
  ba:	c1 11       	cpse	r28, r1
  bc:	fa cf       	rjmp	.-12     	; 0xb2 <main+0x10>
				LED_PORT ^= (1 << LED0);                        /* do whatever */
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	81 27       	eor	r24, r17
  c2:	85 b9       	out	0x05, r24	; 5
				buttonWasPressed = 1;                      /* update the state */
  c4:	c1 2f       	mov	r28, r17
  c6:	f5 cf       	rjmp	.-22     	; 0xb2 <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
