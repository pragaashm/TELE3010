
Oppg_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000668  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000006dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074c  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067e  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027a  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d0  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
volatile unsigned long counter=0;
unsigned long curr_adc=0;

//Creating counter for the servo
ISR (ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
	adc_val += ADC;
  a6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  aa:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_val>
  b2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_val+0x1>
  b6:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <adc_val+0x2>
  ba:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <adc_val+0x3>
  be:	82 0f       	add	r24, r18
  c0:	93 1f       	adc	r25, r19
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc_val>
  ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adc_val+0x1>
  ce:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <adc_val+0x2>
  d2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <adc_val+0x3>
	counter++;
  d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
  da:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
  de:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <counter+0x2>
  e2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <counter+0x3>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter>
  f0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x1>
  f4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <counter+0x2>
  f8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <counter+0x3>
}
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	DDRB |= (1<<DDB1); //PD1 set as output
 112:	21 9a       	sbi	0x04, 1	; 4
	
	ICR1 = ICR_MAX; //Setting max time between pulse
 114:	88 e8       	ldi	r24, 0x88	; 136
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 11c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = OCR_MIN; //Generates interrupt after X time
 120:	8c e5       	ldi	r24, 0x5C	; 92
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	TCCR1A = (1 << COM1A1) | (1<<WGM11); //Set Timer1 control register A
 12c:	82 e8       	ldi	r24, 0x82	; 130
 12e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10); //Timer/Counter1 control register B
 132:	8b e1       	ldi	r24, 0x1B	; 27
 134:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
		
	ADMUX = (1 << REFS0); //Voltage reference set to 5V
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN)|(1 << ADATE)|(1 << ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Enabling and starting ADC converting
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8f ea       	ldi	r24, 0xAF	; 175
 144:	80 83       	st	Z, r24
	//ADEN = Enable ADC|ADATE = Free running(Continuous conversion)|ADIE = Interrupts when conversion is complete|ADPS2/1/0 = Division factor enabled
	
	
	
	sei(); //Interrupt enabled
 146:	78 94       	sei
	
	ADCSRA |= (1<<ADSC); //Starting conversion
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
				curr_adc = round_val; //Replace value
			}
			
			long double servo = OCR_MIN + ((long double)curr_adc * (OCR_MAX - OCR_MIN)/1024); //Adding and converting new servo value.
			
			OCR1A = (int)round(servo); //Moves servo to the given value
 14e:	c8 e8       	ldi	r28, 0x88	; 136
 150:	d0 e0       	ldi	r29, 0x00	; 0
	ADCSRA |= (1<<ADSC); //Starting conversion
	

	while(1)
	{
		if(counter >= 500) //Checking counter
 152:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 156:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 15a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <counter+0x2>
 15e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <counter+0x3>
 162:	84 3f       	cpi	r24, 0xF4	; 244
 164:	91 40       	sbci	r25, 0x01	; 1
 166:	a1 05       	cpc	r26, r1
 168:	b1 05       	cpc	r27, r1
 16a:	98 f3       	brcs	.-26     	; 0x152 <main+0x40>
		{
			cli(); //Clear global interrupt (Avoid interrupts from occurring).
 16c:	f8 94       	cli
			
			unsigned long round_val = round(adc_val / counter); //Rounds to the nearest integer
 16e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <adc_val>
 172:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <adc_val+0x1>
 176:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <adc_val+0x2>
 17a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <adc_val+0x3>
 17e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <counter>
 182:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <counter+0x1>
 186:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <counter+0x2>
 18a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <counter+0x3>
 18e:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodsi4>
 192:	ca 01       	movw	r24, r20
 194:	b9 01       	movw	r22, r18
 196:	0e 94 c8 01 	call	0x390	; 0x390 <__floatunsisf>
 19a:	0e 94 c3 02 	call	0x586	; 0x586 <round>
 19e:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
			
			//Sets variables to 0
			adc_val=0;
 1a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adc_val>
 1a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <adc_val+0x1>
 1aa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <adc_val+0x2>
 1ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <adc_val+0x3>
			counter=0;
 1b2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter>
 1b6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter+0x1>
 1ba:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter+0x2>
 1be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter+0x3>
			
			if(abs(round_val - curr_adc) > 1) //Checks if the absolute value > 1
 1c2:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
 1c6:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
 1ca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
 1ce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
 1d6:	c0 1a       	sub	r12, r16
 1d8:	d1 0a       	sbc	r13, r17
 1da:	e2 0a       	sbc	r14, r18
 1dc:	f3 0a       	sbc	r15, r19
 1de:	a6 01       	movw	r20, r12
 1e0:	dd 20       	and	r13, r13
 1e2:	24 f4       	brge	.+8      	; 0x1ec <main+0xda>
 1e4:	44 27       	eor	r20, r20
 1e6:	55 27       	eor	r21, r21
 1e8:	4c 19       	sub	r20, r12
 1ea:	5d 09       	sbc	r21, r13
 1ec:	42 30       	cpi	r20, 0x02	; 2
 1ee:	51 05       	cpc	r21, r1
 1f0:	44 f0       	brlt	.+16     	; 0x202 <main+0xf0>
			{
				curr_adc = round_val; //Replace value
 1f2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1f6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 1fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
			}
			
			long double servo = OCR_MIN + ((long double)curr_adc * (OCR_MAX - OCR_MIN)/1024); //Adding and converting new servo value.
			
			OCR1A = (int)round(servo); //Moves servo to the given value
 202:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 206:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 20e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 212:	0e 94 c8 01 	call	0x390	; 0x390 <__floatunsisf>
 216:	22 e4       	ldi	r18, 0x42	; 66
 218:	3b e7       	ldi	r19, 0x7B	; 123
 21a:	47 ee       	ldi	r20, 0xE7	; 231
 21c:	53 e4       	ldi	r21, 0x43	; 67
 21e:	0e 94 56 02 	call	0x4ac	; 0x4ac <__mulsf3>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e8       	ldi	r20, 0x80	; 128
 228:	5a e3       	ldi	r21, 0x3A	; 58
 22a:	0e 94 56 02 	call	0x4ac	; 0x4ac <__mulsf3>
 22e:	28 e6       	ldi	r18, 0x68	; 104
 230:	3f e2       	ldi	r19, 0x2F	; 47
 232:	49 eb       	ldi	r20, 0xB9	; 185
 234:	52 e4       	ldi	r21, 0x42	; 66
 236:	0e 94 26 01 	call	0x24c	; 0x24c <__addsf3>
 23a:	0e 94 c3 02 	call	0x586	; 0x586 <round>
 23e:	0e 94 92 01 	call	0x324	; 0x324 <__fixsfsi>
 242:	79 83       	std	Y+1, r23	; 0x01
 244:	68 83       	st	Y, r22
			
			sei(); //Enable interrupts
 246:	78 94       	sei
 248:	84 cf       	rjmp	.-248    	; 0x152 <main+0x40>

0000024a <__subsf3>:
 24a:	50 58       	subi	r21, 0x80	; 128

0000024c <__addsf3>:
 24c:	bb 27       	eor	r27, r27
 24e:	aa 27       	eor	r26, r26
 250:	0e 94 3d 01 	call	0x27a	; 0x27a <__addsf3x>
 254:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_round>
 258:	0e 94 0e 02 	call	0x41c	; 0x41c <__fp_pscA>
 25c:	38 f0       	brcs	.+14     	; 0x26c <__addsf3+0x20>
 25e:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_pscB>
 262:	20 f0       	brcs	.+8      	; 0x26c <__addsf3+0x20>
 264:	39 f4       	brne	.+14     	; 0x274 <__addsf3+0x28>
 266:	9f 3f       	cpi	r25, 0xFF	; 255
 268:	19 f4       	brne	.+6      	; 0x270 <__addsf3+0x24>
 26a:	26 f4       	brtc	.+8      	; 0x274 <__addsf3+0x28>
 26c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_nan>
 270:	0e f4       	brtc	.+2      	; 0x274 <__addsf3+0x28>
 272:	e0 95       	com	r30
 274:	e7 fb       	bst	r30, 7
 276:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>

0000027a <__addsf3x>:
 27a:	e9 2f       	mov	r30, r25
 27c:	0e 94 2d 02 	call	0x45a	; 0x45a <__fp_split3>
 280:	58 f3       	brcs	.-42     	; 0x258 <__addsf3+0xc>
 282:	ba 17       	cp	r27, r26
 284:	62 07       	cpc	r22, r18
 286:	73 07       	cpc	r23, r19
 288:	84 07       	cpc	r24, r20
 28a:	95 07       	cpc	r25, r21
 28c:	20 f0       	brcs	.+8      	; 0x296 <__addsf3x+0x1c>
 28e:	79 f4       	brne	.+30     	; 0x2ae <__addsf3x+0x34>
 290:	a6 f5       	brtc	.+104    	; 0x2fa <__addsf3x+0x80>
 292:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_zero>
 296:	0e f4       	brtc	.+2      	; 0x29a <__addsf3x+0x20>
 298:	e0 95       	com	r30
 29a:	0b 2e       	mov	r0, r27
 29c:	ba 2f       	mov	r27, r26
 29e:	a0 2d       	mov	r26, r0
 2a0:	0b 01       	movw	r0, r22
 2a2:	b9 01       	movw	r22, r18
 2a4:	90 01       	movw	r18, r0
 2a6:	0c 01       	movw	r0, r24
 2a8:	ca 01       	movw	r24, r20
 2aa:	a0 01       	movw	r20, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	ff 27       	eor	r31, r31
 2b0:	59 1b       	sub	r21, r25
 2b2:	99 f0       	breq	.+38     	; 0x2da <__addsf3x+0x60>
 2b4:	59 3f       	cpi	r21, 0xF9	; 249
 2b6:	50 f4       	brcc	.+20     	; 0x2cc <__addsf3x+0x52>
 2b8:	50 3e       	cpi	r21, 0xE0	; 224
 2ba:	68 f1       	brcs	.+90     	; 0x316 <__addsf3x+0x9c>
 2bc:	1a 16       	cp	r1, r26
 2be:	f0 40       	sbci	r31, 0x00	; 0
 2c0:	a2 2f       	mov	r26, r18
 2c2:	23 2f       	mov	r18, r19
 2c4:	34 2f       	mov	r19, r20
 2c6:	44 27       	eor	r20, r20
 2c8:	58 5f       	subi	r21, 0xF8	; 248
 2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <__addsf3x+0x38>
 2cc:	46 95       	lsr	r20
 2ce:	37 95       	ror	r19
 2d0:	27 95       	ror	r18
 2d2:	a7 95       	ror	r26
 2d4:	f0 40       	sbci	r31, 0x00	; 0
 2d6:	53 95       	inc	r21
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <__addsf3x+0x52>
 2da:	7e f4       	brtc	.+30     	; 0x2fa <__addsf3x+0x80>
 2dc:	1f 16       	cp	r1, r31
 2de:	ba 0b       	sbc	r27, r26
 2e0:	62 0b       	sbc	r22, r18
 2e2:	73 0b       	sbc	r23, r19
 2e4:	84 0b       	sbc	r24, r20
 2e6:	ba f0       	brmi	.+46     	; 0x316 <__addsf3x+0x9c>
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	a1 f0       	breq	.+40     	; 0x314 <__addsf3x+0x9a>
 2ec:	ff 0f       	add	r31, r31
 2ee:	bb 1f       	adc	r27, r27
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	c2 f7       	brpl	.-16     	; 0x2e8 <__addsf3x+0x6e>
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <__addsf3x+0x9c>
 2fa:	ba 0f       	add	r27, r26
 2fc:	62 1f       	adc	r22, r18
 2fe:	73 1f       	adc	r23, r19
 300:	84 1f       	adc	r24, r20
 302:	48 f4       	brcc	.+18     	; 0x316 <__addsf3x+0x9c>
 304:	87 95       	ror	r24
 306:	77 95       	ror	r23
 308:	67 95       	ror	r22
 30a:	b7 95       	ror	r27
 30c:	f7 95       	ror	r31
 30e:	9e 3f       	cpi	r25, 0xFE	; 254
 310:	08 f0       	brcs	.+2      	; 0x314 <__addsf3x+0x9a>
 312:	b0 cf       	rjmp	.-160    	; 0x274 <__addsf3+0x28>
 314:	93 95       	inc	r25
 316:	88 0f       	add	r24, r24
 318:	08 f0       	brcs	.+2      	; 0x31c <__addsf3x+0xa2>
 31a:	99 27       	eor	r25, r25
 31c:	ee 0f       	add	r30, r30
 31e:	97 95       	ror	r25
 320:	87 95       	ror	r24
 322:	08 95       	ret

00000324 <__fixsfsi>:
 324:	0e 94 99 01 	call	0x332	; 0x332 <__fixunssfsi>
 328:	68 94       	set
 32a:	b1 11       	cpse	r27, r1
 32c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>
 330:	08 95       	ret

00000332 <__fixunssfsi>:
 332:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_splitA>
 336:	88 f0       	brcs	.+34     	; 0x35a <__fixunssfsi+0x28>
 338:	9f 57       	subi	r25, 0x7F	; 127
 33a:	98 f0       	brcs	.+38     	; 0x362 <__fixunssfsi+0x30>
 33c:	b9 2f       	mov	r27, r25
 33e:	99 27       	eor	r25, r25
 340:	b7 51       	subi	r27, 0x17	; 23
 342:	b0 f0       	brcs	.+44     	; 0x370 <__fixunssfsi+0x3e>
 344:	e1 f0       	breq	.+56     	; 0x37e <__fixunssfsi+0x4c>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a f0       	brmi	.+6      	; 0x356 <__fixunssfsi+0x24>
 350:	ba 95       	dec	r27
 352:	c9 f7       	brne	.-14     	; 0x346 <__fixunssfsi+0x14>
 354:	14 c0       	rjmp	.+40     	; 0x37e <__fixunssfsi+0x4c>
 356:	b1 30       	cpi	r27, 0x01	; 1
 358:	91 f0       	breq	.+36     	; 0x37e <__fixunssfsi+0x4c>
 35a:	0e 94 4f 02 	call	0x49e	; 0x49e <__fp_zero>
 35e:	b1 e0       	ldi	r27, 0x01	; 1
 360:	08 95       	ret
 362:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_zero>
 366:	67 2f       	mov	r22, r23
 368:	78 2f       	mov	r23, r24
 36a:	88 27       	eor	r24, r24
 36c:	b8 5f       	subi	r27, 0xF8	; 248
 36e:	39 f0       	breq	.+14     	; 0x37e <__fixunssfsi+0x4c>
 370:	b9 3f       	cpi	r27, 0xF9	; 249
 372:	cc f3       	brlt	.-14     	; 0x366 <__fixunssfsi+0x34>
 374:	86 95       	lsr	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b3 95       	inc	r27
 37c:	d9 f7       	brne	.-10     	; 0x374 <__fixunssfsi+0x42>
 37e:	3e f4       	brtc	.+14     	; 0x38e <__fixunssfsi+0x5c>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	08 95       	ret

00000390 <__floatunsisf>:
 390:	e8 94       	clt
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <__floatsisf+0x12>

00000394 <__floatsisf>:
 394:	97 fb       	bst	r25, 7
 396:	3e f4       	brtc	.+14     	; 0x3a6 <__floatsisf+0x12>
 398:	90 95       	com	r25
 39a:	80 95       	com	r24
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
 3a2:	8f 4f       	sbci	r24, 0xFF	; 255
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	99 23       	and	r25, r25
 3a8:	a9 f0       	breq	.+42     	; 0x3d4 <__floatsisf+0x40>
 3aa:	f9 2f       	mov	r31, r25
 3ac:	96 e9       	ldi	r25, 0x96	; 150
 3ae:	bb 27       	eor	r27, r27
 3b0:	93 95       	inc	r25
 3b2:	f6 95       	lsr	r31
 3b4:	87 95       	ror	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b7 95       	ror	r27
 3bc:	f1 11       	cpse	r31, r1
 3be:	f8 cf       	rjmp	.-16     	; 0x3b0 <__floatsisf+0x1c>
 3c0:	fa f4       	brpl	.+62     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c2:	bb 0f       	add	r27, r27
 3c4:	11 f4       	brne	.+4      	; 0x3ca <__floatsisf+0x36>
 3c6:	60 ff       	sbrs	r22, 0
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	8f 4f       	sbci	r24, 0xFF	; 255
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	16 c0       	rjmp	.+44     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d4:	88 23       	and	r24, r24
 3d6:	11 f0       	breq	.+4      	; 0x3dc <__floatsisf+0x48>
 3d8:	96 e9       	ldi	r25, 0x96	; 150
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <__floatsisf+0x6a>
 3dc:	77 23       	and	r23, r23
 3de:	21 f0       	breq	.+8      	; 0x3e8 <__floatsisf+0x54>
 3e0:	9e e8       	ldi	r25, 0x8E	; 142
 3e2:	87 2f       	mov	r24, r23
 3e4:	76 2f       	mov	r23, r22
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__floatsisf+0x5e>
 3e8:	66 23       	and	r22, r22
 3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	96 e8       	ldi	r25, 0x86	; 134
 3ee:	86 2f       	mov	r24, r22
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	2a f0       	brmi	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	9a 95       	dec	r25
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	da f7       	brpl	.-10     	; 0x3f6 <__floatsisf+0x62>
 400:	88 0f       	add	r24, r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	97 f9       	bld	r25, 7
 408:	08 95       	ret

0000040a <__fp_inf>:
 40a:	97 f9       	bld	r25, 7
 40c:	9f 67       	ori	r25, 0x7F	; 127
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	08 95       	ret

00000416 <__fp_nan>:
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	08 95       	ret

0000041c <__fp_pscA>:
 41c:	00 24       	eor	r0, r0
 41e:	0a 94       	dec	r0
 420:	16 16       	cp	r1, r22
 422:	17 06       	cpc	r1, r23
 424:	18 06       	cpc	r1, r24
 426:	09 06       	cpc	r0, r25
 428:	08 95       	ret

0000042a <__fp_pscB>:
 42a:	00 24       	eor	r0, r0
 42c:	0a 94       	dec	r0
 42e:	12 16       	cp	r1, r18
 430:	13 06       	cpc	r1, r19
 432:	14 06       	cpc	r1, r20
 434:	05 06       	cpc	r0, r21
 436:	08 95       	ret

00000438 <__fp_round>:
 438:	09 2e       	mov	r0, r25
 43a:	03 94       	inc	r0
 43c:	00 0c       	add	r0, r0
 43e:	11 f4       	brne	.+4      	; 0x444 <__fp_round+0xc>
 440:	88 23       	and	r24, r24
 442:	52 f0       	brmi	.+20     	; 0x458 <__fp_round+0x20>
 444:	bb 0f       	add	r27, r27
 446:	40 f4       	brcc	.+16     	; 0x458 <__fp_round+0x20>
 448:	bf 2b       	or	r27, r31
 44a:	11 f4       	brne	.+4      	; 0x450 <__fp_round+0x18>
 44c:	60 ff       	sbrs	r22, 0
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__fp_round+0x20>
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	08 95       	ret

0000045a <__fp_split3>:
 45a:	57 fd       	sbrc	r21, 7
 45c:	90 58       	subi	r25, 0x80	; 128
 45e:	44 0f       	add	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	59 f0       	breq	.+22     	; 0x47a <__fp_splitA+0x10>
 464:	5f 3f       	cpi	r21, 0xFF	; 255
 466:	71 f0       	breq	.+28     	; 0x484 <__fp_splitA+0x1a>
 468:	47 95       	ror	r20

0000046a <__fp_splitA>:
 46a:	88 0f       	add	r24, r24
 46c:	97 fb       	bst	r25, 7
 46e:	99 1f       	adc	r25, r25
 470:	61 f0       	breq	.+24     	; 0x48a <__fp_splitA+0x20>
 472:	9f 3f       	cpi	r25, 0xFF	; 255
 474:	79 f0       	breq	.+30     	; 0x494 <__fp_splitA+0x2a>
 476:	87 95       	ror	r24
 478:	08 95       	ret
 47a:	12 16       	cp	r1, r18
 47c:	13 06       	cpc	r1, r19
 47e:	14 06       	cpc	r1, r20
 480:	55 1f       	adc	r21, r21
 482:	f2 cf       	rjmp	.-28     	; 0x468 <__fp_split3+0xe>
 484:	46 95       	lsr	r20
 486:	f1 df       	rcall	.-30     	; 0x46a <__fp_splitA>
 488:	08 c0       	rjmp	.+16     	; 0x49a <__fp_splitA+0x30>
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	99 1f       	adc	r25, r25
 492:	f1 cf       	rjmp	.-30     	; 0x476 <__fp_splitA+0xc>
 494:	86 95       	lsr	r24
 496:	71 05       	cpc	r23, r1
 498:	61 05       	cpc	r22, r1
 49a:	08 94       	sec
 49c:	08 95       	ret

0000049e <__fp_zero>:
 49e:	e8 94       	clt

000004a0 <__fp_szero>:
 4a0:	bb 27       	eor	r27, r27
 4a2:	66 27       	eor	r22, r22
 4a4:	77 27       	eor	r23, r23
 4a6:	cb 01       	movw	r24, r22
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <__mulsf3>:
 4ac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__mulsf3x>
 4b0:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_round>
 4b4:	0e 94 0e 02 	call	0x41c	; 0x41c <__fp_pscA>
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <__mulsf3+0x1c>
 4ba:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_pscB>
 4be:	20 f0       	brcs	.+8      	; 0x4c8 <__mulsf3+0x1c>
 4c0:	95 23       	and	r25, r21
 4c2:	11 f0       	breq	.+4      	; 0x4c8 <__mulsf3+0x1c>
 4c4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 4c8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_nan>
 4cc:	11 24       	eor	r1, r1
 4ce:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>

000004d2 <__mulsf3x>:
 4d2:	0e 94 2d 02 	call	0x45a	; 0x45a <__fp_split3>
 4d6:	70 f3       	brcs	.-36     	; 0x4b4 <__mulsf3+0x8>

000004d8 <__mulsf3_pse>:
 4d8:	95 9f       	mul	r25, r21
 4da:	c1 f3       	breq	.-16     	; 0x4cc <__mulsf3+0x20>
 4dc:	95 0f       	add	r25, r21
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	55 1f       	adc	r21, r21
 4e2:	62 9f       	mul	r22, r18
 4e4:	f0 01       	movw	r30, r0
 4e6:	72 9f       	mul	r23, r18
 4e8:	bb 27       	eor	r27, r27
 4ea:	f0 0d       	add	r31, r0
 4ec:	b1 1d       	adc	r27, r1
 4ee:	63 9f       	mul	r22, r19
 4f0:	aa 27       	eor	r26, r26
 4f2:	f0 0d       	add	r31, r0
 4f4:	b1 1d       	adc	r27, r1
 4f6:	aa 1f       	adc	r26, r26
 4f8:	64 9f       	mul	r22, r20
 4fa:	66 27       	eor	r22, r22
 4fc:	b0 0d       	add	r27, r0
 4fe:	a1 1d       	adc	r26, r1
 500:	66 1f       	adc	r22, r22
 502:	82 9f       	mul	r24, r18
 504:	22 27       	eor	r18, r18
 506:	b0 0d       	add	r27, r0
 508:	a1 1d       	adc	r26, r1
 50a:	62 1f       	adc	r22, r18
 50c:	73 9f       	mul	r23, r19
 50e:	b0 0d       	add	r27, r0
 510:	a1 1d       	adc	r26, r1
 512:	62 1f       	adc	r22, r18
 514:	83 9f       	mul	r24, r19
 516:	a0 0d       	add	r26, r0
 518:	61 1d       	adc	r22, r1
 51a:	22 1f       	adc	r18, r18
 51c:	74 9f       	mul	r23, r20
 51e:	33 27       	eor	r19, r19
 520:	a0 0d       	add	r26, r0
 522:	61 1d       	adc	r22, r1
 524:	23 1f       	adc	r18, r19
 526:	84 9f       	mul	r24, r20
 528:	60 0d       	add	r22, r0
 52a:	21 1d       	adc	r18, r1
 52c:	82 2f       	mov	r24, r18
 52e:	76 2f       	mov	r23, r22
 530:	6a 2f       	mov	r22, r26
 532:	11 24       	eor	r1, r1
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	50 40       	sbci	r21, 0x00	; 0
 538:	9a f0       	brmi	.+38     	; 0x560 <__mulsf3_pse+0x88>
 53a:	f1 f0       	breq	.+60     	; 0x578 <__mulsf3_pse+0xa0>
 53c:	88 23       	and	r24, r24
 53e:	4a f0       	brmi	.+18     	; 0x552 <__mulsf3_pse+0x7a>
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	bb 1f       	adc	r27, r27
 546:	66 1f       	adc	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	91 50       	subi	r25, 0x01	; 1
 54e:	50 40       	sbci	r21, 0x00	; 0
 550:	a9 f7       	brne	.-22     	; 0x53c <__mulsf3_pse+0x64>
 552:	9e 3f       	cpi	r25, 0xFE	; 254
 554:	51 05       	cpc	r21, r1
 556:	80 f0       	brcs	.+32     	; 0x578 <__mulsf3_pse+0xa0>
 558:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 55c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>
 560:	5f 3f       	cpi	r21, 0xFF	; 255
 562:	e4 f3       	brlt	.-8      	; 0x55c <__mulsf3_pse+0x84>
 564:	98 3e       	cpi	r25, 0xE8	; 232
 566:	d4 f3       	brlt	.-12     	; 0x55c <__mulsf3_pse+0x84>
 568:	86 95       	lsr	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f7 95       	ror	r31
 572:	e7 95       	ror	r30
 574:	9f 5f       	subi	r25, 0xFF	; 255
 576:	c1 f7       	brne	.-16     	; 0x568 <__mulsf3_pse+0x90>
 578:	fe 2b       	or	r31, r30
 57a:	88 0f       	add	r24, r24
 57c:	91 1d       	adc	r25, r1
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret

00000586 <round>:
 586:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_splitA>
 58a:	e8 f0       	brcs	.+58     	; 0x5c6 <round+0x40>
 58c:	9e 37       	cpi	r25, 0x7E	; 126
 58e:	e8 f0       	brcs	.+58     	; 0x5ca <round+0x44>
 590:	96 39       	cpi	r25, 0x96	; 150
 592:	b8 f4       	brcc	.+46     	; 0x5c2 <round+0x3c>
 594:	9e 38       	cpi	r25, 0x8E	; 142
 596:	48 f4       	brcc	.+18     	; 0x5aa <round+0x24>
 598:	67 2f       	mov	r22, r23
 59a:	78 2f       	mov	r23, r24
 59c:	88 27       	eor	r24, r24
 59e:	98 5f       	subi	r25, 0xF8	; 248
 5a0:	f9 cf       	rjmp	.-14     	; 0x594 <round+0xe>
 5a2:	86 95       	lsr	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	93 95       	inc	r25
 5aa:	95 39       	cpi	r25, 0x95	; 149
 5ac:	d0 f3       	brcs	.-12     	; 0x5a2 <round+0x1c>
 5ae:	b6 2f       	mov	r27, r22
 5b0:	b1 70       	andi	r27, 0x01	; 1
 5b2:	6b 0f       	add	r22, r27
 5b4:	71 1d       	adc	r23, r1
 5b6:	81 1d       	adc	r24, r1
 5b8:	20 f4       	brcc	.+8      	; 0x5c2 <round+0x3c>
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	93 95       	inc	r25
 5c2:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_mintl>
 5c6:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_mpack>
 5ca:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_szero>

000005ce <__fp_mintl>:
 5ce:	88 23       	and	r24, r24
 5d0:	71 f4       	brne	.+28     	; 0x5ee <__fp_mintl+0x20>
 5d2:	77 23       	and	r23, r23
 5d4:	21 f0       	breq	.+8      	; 0x5de <__fp_mintl+0x10>
 5d6:	98 50       	subi	r25, 0x08	; 8
 5d8:	87 2b       	or	r24, r23
 5da:	76 2f       	mov	r23, r22
 5dc:	07 c0       	rjmp	.+14     	; 0x5ec <__fp_mintl+0x1e>
 5de:	66 23       	and	r22, r22
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_mintl+0x18>
 5e2:	99 27       	eor	r25, r25
 5e4:	0d c0       	rjmp	.+26     	; 0x600 <__fp_mintl+0x32>
 5e6:	90 51       	subi	r25, 0x10	; 16
 5e8:	86 2b       	or	r24, r22
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	2a f0       	brmi	.+10     	; 0x5fa <__fp_mintl+0x2c>
 5f0:	9a 95       	dec	r25
 5f2:	66 0f       	add	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	da f7       	brpl	.-10     	; 0x5f0 <__fp_mintl+0x22>
 5fa:	88 0f       	add	r24, r24
 5fc:	96 95       	lsr	r25
 5fe:	87 95       	ror	r24
 600:	97 f9       	bld	r25, 7
 602:	08 95       	ret

00000604 <__fp_mpack>:
 604:	9f 3f       	cpi	r25, 0xFF	; 255
 606:	31 f0       	breq	.+12     	; 0x614 <__fp_mpack_finite+0xc>

00000608 <__fp_mpack_finite>:
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	20 f4       	brcc	.+8      	; 0x614 <__fp_mpack_finite+0xc>
 60c:	87 95       	ror	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b7 95       	ror	r27
 614:	88 0f       	add	r24, r24
 616:	91 1d       	adc	r25, r1
 618:	96 95       	lsr	r25
 61a:	87 95       	ror	r24
 61c:	97 f9       	bld	r25, 7
 61e:	08 95       	ret

00000620 <__udivmodsi4>:
 620:	a1 e2       	ldi	r26, 0x21	; 33
 622:	1a 2e       	mov	r1, r26
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	fd 01       	movw	r30, r26
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__udivmodsi4_ep>

0000062c <__udivmodsi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	ee 1f       	adc	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	a2 17       	cp	r26, r18
 636:	b3 07       	cpc	r27, r19
 638:	e4 07       	cpc	r30, r20
 63a:	f5 07       	cpc	r31, r21
 63c:	20 f0       	brcs	.+8      	; 0x646 <__udivmodsi4_ep>
 63e:	a2 1b       	sub	r26, r18
 640:	b3 0b       	sbc	r27, r19
 642:	e4 0b       	sbc	r30, r20
 644:	f5 0b       	sbc	r31, r21

00000646 <__udivmodsi4_ep>:
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	1a 94       	dec	r1
 650:	69 f7       	brne	.-38     	; 0x62c <__udivmodsi4_loop>
 652:	60 95       	com	r22
 654:	70 95       	com	r23
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	bd 01       	movw	r22, r26
 660:	cf 01       	movw	r24, r30
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
