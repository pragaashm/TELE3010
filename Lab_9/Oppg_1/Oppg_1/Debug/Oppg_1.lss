
Oppg_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000778  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000688  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


void main(void)
{
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 6a       	ori	r24, 0xA2	; 162
  88:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //External clock source on T1 pin. Fast PWM
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8b 61       	ori	r24, 0x1B	; 27
  92:	80 83       	st	Z, r24
	ICR1=4999;  //Top value, fPWM=50Hz /20ms between pulse
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	DDRB |= (1 << DDB1);   //OC1A as output
  a0:	21 9a       	sbi	0x04, 1	; 4
	
	while(1)
	{
		//OCR1A: Generate interrupts after X clock ticks
		OCR1A=97; //0 degree
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	41 e6       	ldi	r20, 0x61	; 97
  a8:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(1000);
		OCR1A=310;   //90 degree
  aa:	26 e3       	ldi	r18, 0x36	; 54
  ac:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(1000);
		OCR1A=530;  //180 degree
  ae:	82 e1       	ldi	r24, 0x12	; 18
  b0:	92 e0       	ldi	r25, 0x02	; 2
	DDRB |= (1 << DDB1);   //OC1A as output
	
	while(1)
	{
		//OCR1A: Generate interrupts after X clock ticks
		OCR1A=97; //0 degree
  b2:	51 83       	std	Z+1, r21	; 0x01
  b4:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	6f ef       	ldi	r22, 0xFF	; 255
  b8:	73 ed       	ldi	r23, 0xD3	; 211
  ba:	a0 e3       	ldi	r26, 0x30	; 48
  bc:	61 50       	subi	r22, 0x01	; 1
  be:	70 40       	sbci	r23, 0x00	; 0
  c0:	a0 40       	sbci	r26, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
		_delay_ms(1000);
		OCR1A=310;   //90 degree
  c8:	31 83       	std	Z+1, r19	; 0x01
  ca:	20 83       	st	Z, r18
  cc:	6f ef       	ldi	r22, 0xFF	; 255
  ce:	73 ed       	ldi	r23, 0xD3	; 211
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	61 50       	subi	r22, 0x01	; 1
  d4:	70 40       	sbci	r23, 0x00	; 0
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
		_delay_ms(1000);
		OCR1A=530;  //180 degree
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
  e2:	6f ef       	ldi	r22, 0xFF	; 255
  e4:	73 ed       	ldi	r23, 0xD3	; 211
  e6:	a0 e3       	ldi	r26, 0x30	; 48
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	70 40       	sbci	r23, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x68>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x72>
  f2:	00 00       	nop
  f4:	de cf       	rjmp	.-68     	; 0xb2 <main+0x32>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
