
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000707  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000643  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <tim_1>:
    
}

void tim_1(void){ //Funksjon for Timer1
    
    DDRB |= (1<<DDB2)|(1<<DDB1); //0C1A/0C1B output. 0C1A satt til compare. ICR1 så en kan bruke compare match
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4
    TCCR1A = (1<<COM1B1)|(0<<COM1B0)|(1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10); //PMW
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12); //ICR1 top 
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    ICR1 = S_PERIOD;
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  ae:	08 95       	ret

000000b0 <ADC_komp>:
    
}

void ADC_komp(void){ //Funksjon for ADC
    ADMUX =  (5<<MUX0)|(1<<REFS0)|(0<<REFS1); //AVcc Internal voltage satt som ref. ADC5 som inngangsverdi
  b0:	85 e4       	ldi	r24, 0x45	; 69
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    DIDR0 |= (1<<ADC4D); //digital input buffer deaktivert.
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	80 83       	st	Z, r24
    ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0); //ADC, auto trigger, ADC interrupt enabled. Prescaler = 8.
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8f ea       	ldi	r24, 0xAF	; 175
  c6:	80 83       	st	Z, r24
    ADCSRB = 0x00; //Free running mode.
  c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    ADCSRA |= (1<<ADSC); //Starter konversjon.
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <main>:
void ADC_komp(void);
uint16_t V_adc;

int main(void){
    
    DDRB |= (1<<DDB5); //PB5 som output
  d4:	25 9a       	sbi	0x04, 5	; 4
    PORTD = (1<<PORTD4); //Pull-up PD4
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	8b b9       	out	0x0b, r24	; 11
    
    tim_1();
  da:	0e 94 48 00 	call	0x90	; 0x90 <tim_1>
    ADC_komp();
  de:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_komp>
    sei();
  e2:	78 94       	sei
    
    
}
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret

000000ea <__vector_21>:
    ADCSRB = 0x00; //Free running mode.
    ADCSRA |= (1<<ADSC); //Starter konversjon.
}


ISR(ADC_vect){ //Avbruddsrutine for ADC
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
    V_adc = ADCH; //Konversjonsverdi er lagret her
 104:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    OCR1A = (S_MIN + S_MIN*(V_adc*5));
 112:	9c 01       	movw	r18, r24
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	42 ee       	ldi	r20, 0xE2	; 226
 12c:	54 e0       	ldi	r21, 0x04	; 4
 12e:	84 9f       	mul	r24, r20
 130:	90 01       	movw	r18, r0
 132:	85 9f       	mul	r24, r21
 134:	30 0d       	add	r19, r0
 136:	94 9f       	mul	r25, r20
 138:	30 0d       	add	r19, r0
 13a:	11 24       	eor	r1, r1
 13c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 140:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_1>:

ISR(INT0_vect){ //Avbrudd og toggle PD5
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
	DDRB |= (1<<DDB5);
 168:	25 9a       	sbi	0x04, 5	; 4
    PINB |= (1<<PINB5);
 16a:	1d 9a       	sbi	0x03, 5	; 3
}
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
