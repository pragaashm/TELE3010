
make_avr_ex_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000200  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
// #include <util/delay.h>  // not needed in this code


int main(void) {
	// -------- Inits --------- //
	PORTD |= (1 << PORTD2);  /* initialize pullup resistor on our input pin */
  80:	5a 9a       	sbi	0x0b, 2	; 11
	DDRB = 0xff;          /* set up all LEDs for output */
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
// 		if (PIND & (1<<PIND2) == 0) {  // equivalent function to code below
// 		if (!(PIND & (1<<PIND2))) {  // equivalent to code below
		if (bit_is_clear(PIND, PIND2)) { // look for button press
				PORTB = 0b00111000; // button pressed
		} else {
			PORTB = 0b00000111;     // button not pressed
  86:	97 e0       	ldi	r25, 0x07	; 7
	// ------ Event loop ------ //
	while (1) {
// 		if (PIND & (1<<PIND2) == 0) {  // equivalent function to code below
// 		if (!(PIND & (1<<PIND2))) {  // equivalent to code below
		if (bit_is_clear(PIND, PIND2)) { // look for button press
				PORTB = 0b00111000; // button pressed
  88:	88 e3       	ldi	r24, 0x38	; 56

	// ------ Event loop ------ //
	while (1) {
// 		if (PIND & (1<<PIND2) == 0) {  // equivalent function to code below
// 		if (!(PIND & (1<<PIND2))) {  // equivalent to code below
		if (bit_is_clear(PIND, PIND2)) { // look for button press
  8a:	4a 99       	sbic	0x09, 2	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <main+0x12>
				PORTB = 0b00111000; // button pressed
  8e:	85 b9       	out	0x05, r24	; 5
  90:	fc cf       	rjmp	.-8      	; 0x8a <main+0xa>
		} else {
			PORTB = 0b00000111;     // button not pressed
  92:	95 b9       	out	0x05, r25	; 5
  94:	fa cf       	rjmp	.-12     	; 0x8a <main+0xa>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
