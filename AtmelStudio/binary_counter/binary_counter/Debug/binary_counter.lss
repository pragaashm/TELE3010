
binary_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083a  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  9e:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:



void delay_ms (uint16_t ms) {
	uint16_t i;
	for (i = 0; i < ms; i++)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	69 f0       	breq	.+26     	; 0xc4 <delay_ms+0x1e>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	ef e9       	ldi	r30, 0x9F	; 159
  b0:	ff e0       	ldi	r31, 0x0F	; 15
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <delay_ms+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <delay_ms+0x12>
  b8:	00 00       	nop
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	82 17       	cp	r24, r18
  c0:	93 07       	cpc	r25, r19
  c2:	a9 f7       	brne	.-22     	; 0xae <delay_ms+0x8>
  c4:	08 95       	ret

000000c6 <main>:
int num = 0;

int main(void)
{
	
	DDRD = 0xFC;  // LED's connected to PD2,PD3,PD4,PD5,PD6,PD7  -- PD2 is the LSB
  c6:	8c ef       	ldi	r24, 0xFC	; 252
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;  // LED's connected to PB0,PB1                  -- PB1 is the MSB
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 b9       	out	0x04, r24	; 4
	
	while(1)
	{


		num++;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		delay_ms(100); //wait 200 ms
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>


		PORTD &= 0b00000011;  // clear bits 7:2
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	83 70       	andi	r24, 0x03	; 3
  ec:	8b b9       	out	0x0b, r24	; 11
		PORTD |= num<<2;
  ee:	2b b1       	in	r18, 0x0b	; 11
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	82 2b       	or	r24, r18
 102:	8b b9       	out	0x0b, r24	; 11

		PORTB &= 0b11111100;
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	85 b9       	out	0x05, r24	; 5
		PORTB |= num>>6;
 10a:	25 b1       	in	r18, 0x05	; 5
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 114:	08 2e       	mov	r0, r24
 116:	89 2f       	mov	r24, r25
 118:	00 0c       	add	r0, r0
 11a:	88 1f       	adc	r24, r24
 11c:	99 0b       	sbc	r25, r25
 11e:	00 0c       	add	r0, r0
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	82 2b       	or	r24, r18
 126:	85 b9       	out	0x05, r24	; 5
 128:	d2 cf       	rjmp	.-92     	; 0xce <main+0x8>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
