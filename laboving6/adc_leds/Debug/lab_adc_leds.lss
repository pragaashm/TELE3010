
lab_adc_leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000639  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

/*	Main program. */
int main( void )
{
	// Set PB5 and OC1A/PB1 as output.
	DDRB  = (1<<DDB5)|(1<<DDB1);
  90:	82 e2       	ldi	r24, 0x22	; 34
  92:	84 b9       	out	0x04, r24	; 4
/*	Task 1
	Clear timer on compare match; top is then OCR1A. Toggle OC1A each time.
	Prescaler is 256, giving a range of 16000000/256 = 625000 ticks per second
	500 ms = 0.5s is thus 31250 */
	TCCR1A = (1<<COM1A0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12);
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	// 31250, order to avoid overflow/truncation in compiler calculations: 
	OCR1A =  (((F_CPU / T1_PRESCALER_A) * TOGGLE_TIME_MS) / 1000 ); 
  a0:	82 e1       	ldi	r24, 0x12	; 18
  a2:	9a e7       	ldi	r25, 0x7A	; 122
  a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1<<OCIE1A);  // enable output compare interrupt
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	sei();
  b2:	78 94       	sei
	 
	// Wait for input/button to be pressed for change to mode 2. PB7 Xplained. PB0 on Arduino
	do { } while ( PINB & (1 << PINB0) );    
  b4:	18 99       	sbic	0x03, 0	; 3
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x24>
	cli();
  b8:	f8 94       	cli
	
/*	Task 2    
	8bit fast PWM inverting mode (256 steps). Set OC1A on Compare Match, clear at TOP. 
	Prescale by 8. 16MHz / (256*256)  = 244 Hz. */
	DDRB  |= (1<<DDB2);  // OC1B/PB2 pin as output also
  ba:	22 9a       	sbi	0x04, 2	; 4
	TCCR1A  = (1<<COM1B1)|(1<<COM1B0)|(1<<COM1A1)|(1<<COM1A0)|(1<<WGM10); 
  bc:	81 ef       	ldi	r24, 0xF1	; 241
  be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B  = (1<<CS11)|(1<<WGM12);
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
//	Enable timer 1 overflow to increase duty cycle periodically. Use oc for sw pwm
	TIMSK1 = (1<<OCIE1A)|(1<<TOIE1);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIFR1 |= (1<<TOV1);  // clear timer overflow flag
  ce:	b0 9a       	sbi	0x16, 0	; 22
	sei();
  d0:	78 94       	sei
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x42>

000000d4 <__vector_13>:
/*	The compare match interrupt could also be used for increasing the duty cycle
	which would not block the main loop and only be run when needed. It needs to 
	be adapted to the prescaler. This interrupt code assumes 8x prescaler, i.e
	8*256*1us ~= 2ms between each. */
ISR(TIMER1_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	static uint8_t count=0;
	count++;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
	if(count >= 64) {
  ec:	80 34       	cpi	r24, 0x40	; 64
  ee:	18 f4       	brcc	.+6      	; 0xf6 <__vector_13+0x22>
	be adapted to the prescaler. This interrupt code assumes 8x prescaler, i.e
	8*256*1us ~= 2ms between each. */
ISR(TIMER1_OVF_vect)
{
	static uint8_t count=0;
	count++;
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f4:	10 c0       	rjmp	.+32     	; 0x116 <__vector_13+0x42>
	if(count >= 64) {
		count = 0;
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		OCR1A++;
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
		OCR1B--;
 108:	ea e8       	ldi	r30, 0x8A	; 138
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	91 83       	std	Z+1, r25	; 0x01
 114:	80 83       	st	Z, r24
	}
	PINB |= (1<<PINB5);
 116:	1d 9a       	sbi	0x03, 5	; 3
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_11>:


/*	Timer1 compare interrupt used to toggle or software pwm on PB5/LED.*/
ISR(TIMER1_COMPA_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
	PINB |= (1<<PINB5);
 134:	1d 9a       	sbi	0x03, 5	; 3
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
