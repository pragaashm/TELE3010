
uart_loopback_w_leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	connected PB1,PB0,PD7-PD2. Sends received data back on UART. */
int main(void)
{
	uint8_t input;
	
	DDRD = 0xFC; // Output on PD2-PD7
  80:	8c ef       	ldi	r24, 0xFC	; 252
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<DDB1)|(1<<DDB0); // Output on PB0-1
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	84 b9       	out	0x04, r24	; 4
// 	DDRB = 0x3F; // Output on PB0-PB5
// 	DDRB = (1<<DDD6)|(1<<DDD7); // Output on PD6-7
	
	
	UBRR0 = BAUD_PRESCALE;         // Set UBBR according to system clock and desired baud rate
  88:	87 e6       	ldi	r24, 0x67	; 103
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Turn on the transmission and reception circuitry
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
    while(1)
    {
		do {} while(!(UCSR0A & (1<<RXC0)));	// Wait for incoming data
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
		// Read received data.
		input = UDR0;
  9e:	a6 ec       	ldi	r26, 0xC6	; 198
  a0:	b0 e0       	ldi	r27, 0x00	; 0
	UBRR0 = BAUD_PRESCALE;         // Set UBBR according to system clock and desired baud rate
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Turn on the transmission and reception circuitry
	
    while(1)
    {
		do {} while(!(UCSR0A & (1<<RXC0)));	// Wait for incoming data
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	ec f7       	brge	.-6      	; 0xa2 <main+0x22>
		// Read received data.
		input = UDR0;
  a8:	8c 91       	ld	r24, X
		// Loopback received data to UART.
		UDR0 = input;
  aa:	8c 93       	st	X, r24
		input = ~input; // Invert as LED are active low. Remove/comment out is active high.
  ac:	80 95       	com	r24
		// Output received data to PB1-0,PD7-2
		PORTB = input >> 6;	     // 0b10101110 >> 6 = 0b00000010 
  ae:	98 2f       	mov	r25, r24
  b0:	92 95       	swap	r25
  b2:	96 95       	lsr	r25
  b4:	96 95       	lsr	r25
  b6:	93 70       	andi	r25, 0x03	; 3
  b8:	95 b9       	out	0x05, r25	; 5
		PORTD = input << 2;      // 0b10101110 << 2 = 0b10111000
  ba:	88 0f       	add	r24, r24
  bc:	88 0f       	add	r24, r24
  be:	8b b9       	out	0x0b, r24	; 11

//		Alternative using PB5-PB0 and PD7-PD6. Output pins need to be modified if used.
// 		PORTB = input >> 2;	     // 0b10101110 >> 2 = 0b00101011
// 		PORTD = input << 6;      // 0b10101110 << 6 = 0b10000000
    }
  c0:	f0 cf       	rjmp	.-32     	; 0xa2 <main+0x22>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
