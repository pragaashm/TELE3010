
reaction_timer_MAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  000002e8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f3c  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000793  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000025c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f1  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c5  00000000  00000000  00002c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
int main(void) {
  uint16_t timerValue;

  // -------- Inits --------- //

  initUSART();
  96:	0e 94 3a 01 	call	0x274	; 0x274 <initUSART>



static inline void initTimer1(void) {
                               /* Normal mode (default), just counting */
  TCCR1B |= (1 << CS12) | (1 << CS10);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	80 83       	st	Z, r24

  // -------- Inits --------- //

  initUSART();
  initTimer1();
  LED_DDR = 0xff;                               /* all LEDs for output */
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 b9       	out	0x04, r24	; 4
  BUTTON_PORT |= (1 << BUTTON);             /* enable internal pull-up */
  a8:	5a 9a       	sbi	0x0b, 2	; 11

  printString("\r\nReaction Timer:\r\n");
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
  printString("---------------\r\n");
  b2:	84 e1       	ldi	r24, 0x14	; 20
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
  printString("Press any key to start.\r\n");
  ba:	86 e2       	ldi	r24, 0x26	; 38
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
    receiveByte();                                    /* press any key */
    printString("\r\nGet ready...");
    randomDelay();

    printString("\r\nGo!\r\n");
    LED_PORT = 0xff;                                     /* light LEDs */
  c2:	ff 24       	eor	r15, r15
  c4:	fa 94       	dec	r15
    TCNT1 = 0;                                        /* reset counter */
  c6:	04 e8       	ldi	r16, 0x84	; 132
  c8:	10 e0       	ldi	r17, 0x00	; 0
  printString("Press any key to start.\r\n");

  // ------ Event loop ------ //
  while (1) {

    receiveByte();                                    /* press any key */
  ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <receiveByte>
    printString("\r\nGet ready...");
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
    randomDelay();
  d6:	0e 94 22 01 	call	0x244	; 0x244 <randomDelay>

    printString("\r\nGo!\r\n");
  da:	8f e4       	ldi	r24, 0x4F	; 79
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
    LED_PORT = 0xff;                                     /* light LEDs */
  e2:	f5 b8       	out	0x05, r15	; 5
    TCNT1 = 0;                                        /* reset counter */
  e4:	f8 01       	movw	r30, r16
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1

    if (bit_is_clear(BUTTON_PIN, BUTTON)) {
  ea:	4a 99       	sbic	0x09, 2	; 9
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <main+0x62>
            /* Button pressed _exactly_ as LEDs light up.  Suspicious. */
      printString("You're only cheating yourself.\r\n");
  ee:	87 e5       	ldi	r24, 0x57	; 87
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
  f6:	11 c0       	rjmp	.+34     	; 0x11a <main+0x84>
    }
    else {
      // Wait until button pressed, save timer value.
      loop_until_bit_is_clear(BUTTON_PIN, BUTTON);
  f8:	4a 99       	sbic	0x09, 2	; 9
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <main+0x62>
      timerValue = TCNT1 >> 4;
  fc:	f8 01       	movw	r30, r16
  fe:	c0 81       	ld	r28, Z
 100:	d1 81       	ldd	r29, Z+1	; 0x01
 102:	d2 95       	swap	r29
 104:	c2 95       	swap	r28
 106:	cf 70       	andi	r28, 0x0F	; 15
 108:	cd 27       	eor	r28, r29
 10a:	df 70       	andi	r29, 0x0F	; 15
 10c:	cd 27       	eor	r28, r29
      /* each tick is approx 1/16 milliseconds, so we bit-shift divide */

      printMilliseconds(timerValue);
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 93 00 	call	0x126	; 0x126 <printMilliseconds>
      printComments(timerValue);
 114:	ce 01       	movw	r24, r28
 116:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <printComments>
    }

    // Clear LEDs and start again.
    LED_PORT = 0x00;
 11a:	15 b8       	out	0x05, r1	; 5
    printString("Press any key to try again.\r\n");
 11c:	88 e7       	ldi	r24, 0x78	; 120
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>

  }                                                  /* End event loop */
 124:	d2 cf       	rjmp	.-92     	; 0xca <main+0x34>

00000126 <printMilliseconds>:

#include "support.h"

void printMilliseconds(uint16_t value) {
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
     you took over the serial port.  Does ascii conversion, prints
     decimal point, and drops extra leading zeros.
   */
  uint8_t digit;

  printString("\r\nYou took ");
 12c:	86 e9       	ldi	r24, 0x96	; 150
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
                                               /* add up ten-thousands */
  digit = 0;
  while (value >= 10000) {
 134:	c0 31       	cpi	r28, 0x10	; 16
 136:	27 e2       	ldi	r18, 0x27	; 39
 138:	d2 07       	cpc	r29, r18
 13a:	80 f0       	brcs	.+32     	; 0x15c <printMilliseconds+0x36>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	01 c0       	rjmp	.+2      	; 0x142 <printMilliseconds+0x1c>
    digit++;
 140:	89 2f       	mov	r24, r25
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	98 0f       	add	r25, r24
    value -= 10000;
 146:	c0 51       	subi	r28, 0x10	; 16
 148:	d7 42       	sbci	r29, 0x27	; 39
  uint8_t digit;

  printString("\r\nYou took ");
                                               /* add up ten-thousands */
  digit = 0;
  while (value >= 10000) {
 14a:	c0 31       	cpi	r28, 0x10	; 16
 14c:	27 e2       	ldi	r18, 0x27	; 39
 14e:	d2 07       	cpc	r29, r18
 150:	b8 f7       	brcc	.-18     	; 0x140 <printMilliseconds+0x1a>
    digit++;
    value -= 10000;
  }
  if (digit) {
 152:	99 23       	and	r25, r25
 154:	19 f0       	breq	.+6      	; 0x15c <printMilliseconds+0x36>
    transmitByte('0' + digit);
 156:	8f 5c       	subi	r24, 0xCF	; 207
 158:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>
  }
                                                   /* add up thousands */
  digit = 0;
  while (value >= 1000) {
 15c:	c8 3e       	cpi	r28, 0xE8	; 232
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	d8 07       	cpc	r29, r24
 162:	48 f0       	brcs	.+18     	; 0x176 <printMilliseconds+0x50>
 164:	80 e0       	ldi	r24, 0x00	; 0
    digit++;
 166:	8f 5f       	subi	r24, 0xFF	; 255
    value -= 1000;
 168:	c8 5e       	subi	r28, 0xE8	; 232
 16a:	d3 40       	sbci	r29, 0x03	; 3
  if (digit) {
    transmitByte('0' + digit);
  }
                                                   /* add up thousands */
  digit = 0;
  while (value >= 1000) {
 16c:	c8 3e       	cpi	r28, 0xE8	; 232
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	d9 07       	cpc	r29, r25
 172:	c8 f7       	brcc	.-14     	; 0x166 <printMilliseconds+0x40>
 174:	01 c0       	rjmp	.+2      	; 0x178 <printMilliseconds+0x52>
  }
  if (digit) {
    transmitByte('0' + digit);
  }
                                                   /* add up thousands */
  digit = 0;
 176:	80 e0       	ldi	r24, 0x00	; 0
  while (value >= 1000) {
    digit++;
    value -= 1000;
  }
  transmitByte('0' + digit);
 178:	80 5d       	subi	r24, 0xD0	; 208
 17a:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>

                            /* decimal point here b/c dividing by 1000 */
  transmitByte('.');
 17e:	8e e2       	ldi	r24, 0x2E	; 46
 180:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>

                                                    /* add up hundreds */
  digit = 0;
  while (value >= 100) {
 184:	c4 36       	cpi	r28, 0x64	; 100
 186:	d1 05       	cpc	r29, r1
 188:	40 f0       	brcs	.+16     	; 0x19a <printMilliseconds+0x74>
 18a:	80 e0       	ldi	r24, 0x00	; 0
    digit++;
 18c:	8f 5f       	subi	r24, 0xFF	; 255
    value -= 100;
 18e:	c4 56       	subi	r28, 0x64	; 100
 190:	d1 09       	sbc	r29, r1
                            /* decimal point here b/c dividing by 1000 */
  transmitByte('.');

                                                    /* add up hundreds */
  digit = 0;
  while (value >= 100) {
 192:	c4 36       	cpi	r28, 0x64	; 100
 194:	d1 05       	cpc	r29, r1
 196:	d0 f7       	brcc	.-12     	; 0x18c <printMilliseconds+0x66>
 198:	01 c0       	rjmp	.+2      	; 0x19c <printMilliseconds+0x76>

                            /* decimal point here b/c dividing by 1000 */
  transmitByte('.');

                                                    /* add up hundreds */
  digit = 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
  while (value >= 100) {
    digit++;
    value -= 100;
  }
  transmitByte('0' + digit);
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>
                                                        /* add up tens */
  digit = 0;
  while (value >= 10) {
 1a2:	ca 30       	cpi	r28, 0x0A	; 10
 1a4:	d1 05       	cpc	r29, r1
 1a6:	38 f0       	brcs	.+14     	; 0x1b6 <printMilliseconds+0x90>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
    digit++;
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
    value -= 10;
 1ac:	2a 97       	sbiw	r28, 0x0a	; 10
    value -= 100;
  }
  transmitByte('0' + digit);
                                                        /* add up tens */
  digit = 0;
  while (value >= 10) {
 1ae:	ca 30       	cpi	r28, 0x0A	; 10
 1b0:	d1 05       	cpc	r29, r1
 1b2:	d8 f7       	brcc	.-10     	; 0x1aa <printMilliseconds+0x84>
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <printMilliseconds+0x92>
    digit++;
    value -= 100;
  }
  transmitByte('0' + digit);
                                                        /* add up tens */
  digit = 0;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
  while (value >= 10) {
    digit++;
    value -= 10;
  }
  transmitByte('0' + digit);
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>

  // Ones digit is easy.
  transmitByte('0' + value);
 1be:	8c 2f       	mov	r24, r28
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>

  printString(" seconds.\r\n");
 1c6:	82 ea       	ldi	r24, 0xA2	; 162
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <printComments>:

void printComments(uint16_t value) {
            /* Given a value in milliseconds, rates your reaction time */
  if (value > 2000) {
 1d4:	81 3d       	cpi	r24, 0xD1	; 209
 1d6:	27 e0       	ldi	r18, 0x07	; 7
 1d8:	92 07       	cpc	r25, r18
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <printComments+0x12>
    printString("---->  Ummm...this is a reaction timer...\r\n");
 1dc:	8e ea       	ldi	r24, 0xAE	; 174
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 1e4:	08 95       	ret
  }
  else if (value > 1000) {
 1e6:	89 3e       	cpi	r24, 0xE9	; 233
 1e8:	23 e0       	ldi	r18, 0x03	; 3
 1ea:	92 07       	cpc	r25, r18
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <printComments+0x24>
    printString("---->  Hello?\r\n");
 1ee:	8a ed       	ldi	r24, 0xDA	; 218
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 1f6:	08 95       	ret
  }
  else if (value > 500) {
 1f8:	85 3f       	cpi	r24, 0xF5	; 245
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	92 07       	cpc	r25, r18
 1fe:	28 f0       	brcs	.+10     	; 0x20a <printComments+0x36>
    printString("---->  Slow.\r\n");
 200:	8a ee       	ldi	r24, 0xEA	; 234
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 208:	08 95       	ret
  }
  else if (value > 250) {
 20a:	8b 3f       	cpi	r24, 0xFB	; 251
 20c:	91 05       	cpc	r25, r1
 20e:	28 f0       	brcs	.+10     	; 0x21a <printComments+0x46>
    printString("---->  Have another cup of coffee.\r\n");
 210:	89 ef       	ldi	r24, 0xF9	; 249
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 218:	08 95       	ret
  }
  else if (value > 200) {
 21a:	89 3c       	cpi	r24, 0xC9	; 201
 21c:	91 05       	cpc	r25, r1
 21e:	28 f0       	brcs	.+10     	; 0x22a <printComments+0x56>
    printString("---->  Respectable.\r\n");
 220:	8e e1       	ldi	r24, 0x1E	; 30
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 228:	08 95       	ret
  }
  else if (value >= 150) {
 22a:	86 39       	cpi	r24, 0x96	; 150
 22c:	91 05       	cpc	r25, r1
 22e:	28 f0       	brcs	.+10     	; 0x23a <printComments+0x66>
    printString("---->  Fast.\r\n");
 230:	84 e3       	ldi	r24, 0x34	; 52
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 238:	08 95       	ret
  }
  else if (value < 150) {
    printString("---->  Amazing!\r\n");
 23a:	83 e4       	ldi	r24, 0x43	; 67
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <printString>
 242:	08 95       	ret

00000244 <randomDelay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <randomDelay+0x6>
 252:	00 c0       	rjmp	.+0      	; 0x254 <randomDelay+0x10>
 254:	00 00       	nop
  /* It's not really random, but very hard to control --
     like coin-flipping. */
  uint8_t randomTime;

  _delay_ms(1000);                              /* wait at least 1 sec */
  randomTime = (uint8_t) TCNT1;
 256:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 25a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  /* type-casting the 16-bit TCNT1 as an 8-bit number keeps
     only the 8 least-significant (fastest-changing) bits  */
  while (--randomTime) {
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	41 f0       	breq	.+16     	; 0x272 <randomDelay+0x2e>
 262:	ef e3       	ldi	r30, 0x3F	; 63
 264:	fc e9       	ldi	r31, 0x9C	; 156
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <randomDelay+0x22>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <randomDelay+0x28>
 26c:	00 00       	nop
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	c1 f7       	brne	.-16     	; 0x262 <randomDelay+0x1e>
 272:	08 95       	ret

00000274 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0 = UBRR_VALUE;                        /* defined in setbaud.h */
 274:	87 e6       	ldi	r24, 0x67	; 103
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 27c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 280:	e0 ec       	ldi	r30, 0xC0	; 192
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 28a:	88 e1       	ldi	r24, 0x18	; 24
 28c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 296:	08 95       	ret

00000298 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 298:	e0 ec       	ldi	r30, 0xC0	; 192
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	90 81       	ld	r25, Z
 29e:	95 ff       	sbrs	r25, 5
 2a0:	fd cf       	rjmp	.-6      	; 0x29c <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 2a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a6:	08 95       	ret

000002a8 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 2a8:	e0 ec       	ldi	r30, 0xC0	; 192
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	ec f7       	brge	.-6      	; 0x2ac <receiveByte+0x4>
  return UDR0;                                /* return register value */
 2b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 2b6:	08 95       	ret

000002b8 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	59 f0       	breq	.+22     	; 0x2dc <printString+0x24>
 2c6:	8f 01       	movw	r16, r30
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 2ca:	0e 94 4c 01 	call	0x298	; 0x298 <transmitByte>
    i++;
 2ce:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 2d0:	f8 01       	movw	r30, r16
 2d2:	ec 0f       	add	r30, r28
 2d4:	f1 1d       	adc	r31, r1
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f7 cf       	rjmp	.-18     	; 0x2ca <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
