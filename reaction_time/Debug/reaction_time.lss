
reaction_time.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b93  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000886  00000000  00000000  0000104f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d7  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d6  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025c  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "usart_routines.h"


// Main.
int main (void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c7 54       	subi	r28, 0x47	; 71
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	uint16_t reaction_time_ms;
	char init_string[] = "\r\nPress button to start...";
  ac:	8b e1       	ldi	r24, 0x1B	; 27
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x20>
	char started_string[] = {"Started!\r\n"};
  be:	8b e0       	ldi	r24, 0x0B	; 11
  c0:	eb e1       	ldi	r30, 0x1B	; 27
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	de 01       	movw	r26, r28
  c6:	5c 96       	adiw	r26, 0x1c	; 28
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x32>
	char reaction_time_string[] = {"1234ms \r\n"};  // initialized to 4 digit value
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	e6 e2       	ldi	r30, 0x26	; 38
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	de 01       	movw	r26, r28
  d8:	97 96       	adiw	r26, 0x27	; 39
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x44>
	char too_slow_string[] = {"Too slow!\r\n"};
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	e0 e3       	ldi	r30, 0x30	; 48
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	de 01       	movw	r26, r28
  ea:	d1 96       	adiw	r26, 0x31	; 49
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	8a 95       	dec	r24
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x56>
	char cheater_string[] = {"Cheater!\r\n"};
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	ec e3       	ldi	r30, 0x3C	; 60
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	de 01       	movw	r26, r28
  fc:	dd 96       	adiw	r26, 0x3d	; 61
  fe:	01 90       	ld	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	8a 95       	dec	r24
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x68>

	USART_TX_Init(BAUD_VALUE);
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 36 01 	call	0x26c	; 0x26c <USART_TX_Init>

	DDRB = (1<<DDB5);  // PB5 output.
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<PORTB5) | (1<<PORTB0);  // PB5 high, i.e. led off, pull-up on PB0 enabled
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	85 b9       	out	0x05, r24	; 5
	
	Timer1_Init_Capture();
 116:	0e 94 ed 00 	call	0x1da	; 0x1da <Timer1_Init_Capture>
 11a:	8e 01       	movw	r16, r28
 11c:	09 5d       	subi	r16, 0xD9	; 217
 11e:	1f 4f       	sbci	r17, 0xFF	; 255

	do {
		USART_Transmit_String(init_string);
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Transmit_String>

		// Wait for key press and use debouncing.
		do {} while ( PINB & (1 << PINB0) );  // Wait for PINB0 to be pushed.
 128:	18 99       	sbic	0x03, 0	; 3
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x9a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xa0>
 136:	00 00       	nop
		_delay_ms(10);
		do {} while ( !(PINB & (1 << PINB0)) );  // Wait for PINB0 to be released.
 138:	18 9b       	sbis	0x03, 0	; 3
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0xa2>

		USART_Transmit_String(started_string);
 13c:	ce 01       	movw	r24, r28
 13e:	4c 96       	adiw	r24, 0x1c	; 28
 140:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Transmit_String>

		if(wait_random_time()) {
 144:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <wait_random_time>
 148:	88 23       	and	r24, r24
 14a:	c9 f1       	breq	.+114    	; 0x1be <main+0x128>

			reaction_time_ms = measure_reaction_time();
 14c:	0e 94 0a 01 	call	0x214	; 0x214 <measure_reaction_time>
 150:	ac 01       	movw	r20, r24

	/* 		Convert reaction time to ascii value and insert it into string. It 
			divides modulo 10 thus giving the remainder */
			if (reaction_time_ms != 0 ) {
 152:	89 2b       	or	r24, r25
 154:	79 f1       	breq	.+94     	; 0x1b4 <main+0x11e>
 156:	fe 01       	movw	r30, r28
 158:	bb 96       	adiw	r30, 0x2b	; 43
				int8_t count;
				for (count = 3 ; count >= 0 ; count--) {
					reaction_time_string[count] = reaction_time_ms%10 + '0';
 15a:	9a 01       	movw	r18, r20
 15c:	ad ec       	ldi	r26, 0xCD	; 205
 15e:	bc ec       	ldi	r27, 0xCC	; 204
 160:	0e 94 76 01 	call	0x2ec	; 0x2ec <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	9c 01       	movw	r18, r24
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	82 0f       	add	r24, r18
 184:	93 1f       	adc	r25, r19
 186:	9a 01       	movw	r18, r20
 188:	28 1b       	sub	r18, r24
 18a:	39 0b       	sbc	r19, r25
 18c:	c9 01       	movw	r24, r18
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	82 93       	st	-Z, r24
					reaction_time_ms /= 10;
 192:	9a 01       	movw	r18, r20
 194:	0e 94 76 01 	call	0x2ec	; 0x2ec <__umulhisi3>
 198:	ac 01       	movw	r20, r24
 19a:	56 95       	lsr	r21
 19c:	47 95       	ror	r20
 19e:	56 95       	lsr	r21
 1a0:	47 95       	ror	r20
 1a2:	56 95       	lsr	r21
 1a4:	47 95       	ror	r20

	/* 		Convert reaction time to ascii value and insert it into string. It 
			divides modulo 10 thus giving the remainder */
			if (reaction_time_ms != 0 ) {
				int8_t count;
				for (count = 3 ; count >= 0 ; count--) {
 1a6:	0e 17       	cp	r16, r30
 1a8:	1f 07       	cpc	r17, r31
 1aa:	b9 f6       	brne	.-82     	; 0x15a <main+0xc4>
					reaction_time_string[count] = reaction_time_ms%10 + '0';
					reaction_time_ms /= 10;
				}
				USART_Transmit_String(reaction_time_string);
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Transmit_String>
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <main+0x130>
			} else {
				USART_Transmit_String(too_slow_string);
 1b4:	ce 01       	movw	r24, r28
 1b6:	c1 96       	adiw	r24, 0x31	; 49
 1b8:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Transmit_String>
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <main+0x130>
			}
		} else { 
			USART_Transmit_String(cheater_string);
 1be:	ce 01       	movw	r24, r28
 1c0:	cd 96       	adiw	r24, 0x3d	; 61
 1c2:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Transmit_String>
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	31 50       	subi	r19, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x136>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x140>
 1d6:	00 00       	nop
 1d8:	a3 cf       	rjmp	.-186    	; 0x120 <main+0x8a>

000001da <Timer1_Init_Capture>:
/*	Configre Timer1 with 1024x prescaling and input capture noise supression 
	enabled.
 */
void Timer1_Init_Capture(void)
{
	TCCR1B = (1<<ICNC1)|(1<<CS12)|(1<<CS10);   // Input capture noise suppression. 1024x prescaler.
 1da:	85 e8       	ldi	r24, 0x85	; 133
 1dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	PCMSK0 = (1<<PCINT0);  // enable pin change interrupt tracking on PPB0 = CINT0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 1e6:	08 95       	ret

000001e8 <wait_random_time>:
	with 16*4=64ms delay thus giving possible delays of x*64 mseconds + 0,64,128,..4096 ms. 
 */
uint8_t wait_random_time(void)
{
	uint8_t no_cheat = 1;
	PCIFR = (1<<PCINT0);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	8b bb       	out	0x1b, r24	; 27
	uint16_t delay = (TCNT1L & 0x3F) + 16; // 0x3F = 0b 0011 1111 =63, 64x64=4096
 1ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 1f0:	8f 73       	andi	r24, 0x3F	; 63
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	40 96       	adiw	r24, 0x10	; 16
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	3f e1       	ldi	r19, 0x1F	; 31
 1fa:	43 e0       	ldi	r20, 0x03	; 3
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	30 40       	sbci	r19, 0x00	; 0
 200:	40 40       	sbci	r20, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <wait_random_time+0x14>
 204:	00 c0       	rjmp	.+0      	; 0x206 <wait_random_time+0x1e>
 206:	00 00       	nop
	while (delay > 0) {
		_delay_ms(64);
		delay--;
 208:	01 97       	sbiw	r24, 0x01	; 1
uint8_t wait_random_time(void)
{
	uint8_t no_cheat = 1;
	PCIFR = (1<<PCINT0);
	uint16_t delay = (TCNT1L & 0x3F) + 16; // 0x3F = 0b 0011 1111 =63, 64x64=4096
	while (delay > 0) {
 20a:	a9 f7       	brne	.-22     	; 0x1f6 <wait_random_time+0xe>
		_delay_ms(64);
		delay--;
	}
	if (PCIFR & (1<<PCINT0)) {
 20c:	8b b3       	in	r24, 0x1b	; 27
// 		delay--;	
// 	}
// 	if (!(PINB & (1 << PINB0))) {
// 		no_cheat = 0;
// 	}
	return(no_cheat);	
 20e:	80 95       	com	r24
}
 210:	81 70       	andi	r24, 0x01	; 1
 212:	08 95       	ret

00000214 <measure_reaction_time>:
uint16_t measure_reaction_time(void)
{
	uint16_t start_time, stop_time;
	uint32_t reaction_time = 0;

	TIFR1 |= (1<<ICF1) | (1<<TOV1);  // Clear flags.
 214:	86 b3       	in	r24, 0x16	; 22
 216:	81 62       	ori	r24, 0x21	; 33
 218:	86 bb       	out	0x16, r24	; 22
	TCNT1 = 0;
 21a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 21e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	PORTB |= (1<<PORTB5);
 222:	2d 9a       	sbi	0x05, 5	; 5
	start_time = 0;
	do {} while ( !(TIFR1 & ((1<<ICF1)|(1<<TOV1)) )  );  // Wait for a input capture event to happen.
 224:	86 b3       	in	r24, 0x16	; 22
 226:	81 72       	andi	r24, 0x21	; 33
 228:	e9 f3       	breq	.-6      	; 0x224 <measure_reaction_time+0x10>
	PORTB &= ~(1<<PORTB5);
 22a:	2d 98       	cbi	0x05, 5	; 5
	if ( !(TIFR1 & (1<<TOV1)) ) {
 22c:	b0 99       	sbic	0x16, 0	; 22
 22e:	19 c0       	rjmp	.+50     	; 0x262 <measure_reaction_time+0x4e>
		stop_time = ICR1;
 230:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 234:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
		// Calcualtion of reaction time in milliseconds
		reaction_time = ((uint32_t)(stop_time-start_time) << T1_PRESCALE_BITS)/(F_CPU/1000);
 238:	cb 01       	movw	r24, r22
 23a:	a0 e0       	ldi	r26, 0x00	; 0
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	bc 01       	movw	r22, r24
 240:	cd 01       	movw	r24, r26
 242:	05 2e       	mov	r0, r21
 244:	5a e0       	ldi	r21, 0x0A	; 10
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	5a 95       	dec	r21
 250:	d1 f7       	brne	.-12     	; 0x246 <measure_reaction_time+0x32>
 252:	50 2d       	mov	r21, r0
 254:	20 e8       	ldi	r18, 0x80	; 128
 256:	3e e3       	ldi	r19, 0x3E	; 62
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__udivmodsi4>
 260:	03 c0       	rjmp	.+6      	; 0x268 <measure_reaction_time+0x54>
	} else {
		reaction_time = 0;
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	a9 01       	movw	r20, r18
	}

	return (uint16_t)reaction_time;		
}
 268:	c9 01       	movw	r24, r18
 26a:	08 95       	ret

0000026c <USART_TX_Init>:

/*	Transmit data. Waits for last transmission to complete and is thus blocking.*/
void USART_Transmit( char data )
{
	while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer                
	UDR0 = data;                   // Start transmission
 26c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 27a:	08 95       	ret

0000027c <USART_Transmit_String>:


/*	Transmit a string. Waits for last transmission to complete then outputs 
	characters from the string until NULL character (\0) is encountered.*/
void USART_Transmit_String( char *data )
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	while (*data != '\0' ) {
 280:	fc 01       	movw	r30, r24
 282:	20 81       	ld	r18, Z
 284:	22 23       	and	r18, r18
 286:	69 f0       	breq	.+26     	; 0x2a2 <USART_Transmit_String+0x26>
 288:	dc 01       	movw	r26, r24
 28a:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer                
 28c:	e0 ec       	ldi	r30, 0xC0	; 192
 28e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;                   // Start transmission
 290:	c6 ec       	ldi	r28, 0xC6	; 198
 292:	d0 e0       	ldi	r29, 0x00	; 0
/*	Transmit a string. Waits for last transmission to complete then outputs 
	characters from the string until NULL character (\0) is encountered.*/
void USART_Transmit_String( char *data )
{
	while (*data != '\0' ) {
		while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer                
 294:	90 81       	ld	r25, Z
 296:	95 ff       	sbrs	r25, 5
 298:	fd cf       	rjmp	.-6      	; 0x294 <USART_Transmit_String+0x18>
		UDR0 = *data;                   // Start transmission
 29a:	28 83       	st	Y, r18

/*	Transmit a string. Waits for last transmission to complete then outputs 
	characters from the string until NULL character (\0) is encountered.*/
void USART_Transmit_String( char *data )
{
	while (*data != '\0' ) {
 29c:	2d 91       	ld	r18, X+
 29e:	21 11       	cpse	r18, r1
 2a0:	f9 cf       	rjmp	.-14     	; 0x294 <USART_Transmit_String+0x18>
		while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer                
		UDR0 = *data;                   // Start transmission
// 		USART_Transmit(*data);
		data++;
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <__udivmodsi4>:
 2a8:	a1 e2       	ldi	r26, 0x21	; 33
 2aa:	1a 2e       	mov	r1, r26
 2ac:	aa 1b       	sub	r26, r26
 2ae:	bb 1b       	sub	r27, r27
 2b0:	fd 01       	movw	r30, r26
 2b2:	0d c0       	rjmp	.+26     	; 0x2ce <__udivmodsi4_ep>

000002b4 <__udivmodsi4_loop>:
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	ee 1f       	adc	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	a2 17       	cp	r26, r18
 2be:	b3 07       	cpc	r27, r19
 2c0:	e4 07       	cpc	r30, r20
 2c2:	f5 07       	cpc	r31, r21
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <__udivmodsi4_ep>
 2c6:	a2 1b       	sub	r26, r18
 2c8:	b3 0b       	sbc	r27, r19
 2ca:	e4 0b       	sbc	r30, r20
 2cc:	f5 0b       	sbc	r31, r21

000002ce <__udivmodsi4_ep>:
 2ce:	66 1f       	adc	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	1a 94       	dec	r1
 2d8:	69 f7       	brne	.-38     	; 0x2b4 <__udivmodsi4_loop>
 2da:	60 95       	com	r22
 2dc:	70 95       	com	r23
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	9b 01       	movw	r18, r22
 2e4:	ac 01       	movw	r20, r24
 2e6:	bd 01       	movw	r22, r26
 2e8:	cf 01       	movw	r24, r30
 2ea:	08 95       	ret

000002ec <__umulhisi3>:
 2ec:	a2 9f       	mul	r26, r18
 2ee:	b0 01       	movw	r22, r0
 2f0:	b3 9f       	mul	r27, r19
 2f2:	c0 01       	movw	r24, r0
 2f4:	a3 9f       	mul	r26, r19
 2f6:	70 0d       	add	r23, r0
 2f8:	81 1d       	adc	r24, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	91 1d       	adc	r25, r1
 2fe:	b2 9f       	mul	r27, r18
 300:	70 0d       	add	r23, r0
 302:	81 1d       	adc	r24, r1
 304:	11 24       	eor	r1, r1
 306:	91 1d       	adc	r25, r1
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
